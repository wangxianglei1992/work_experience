LK启动流程：
	arch/arm64/	system-onesegment.ld		//ENTRY(_start)指定LK从_start开始
		arch/arm64/	start.S			//bl  lk_main跳转到lk_main函数
			top/	mian.c			///* called from arch code */
				// get us into some sort of thread context
				thread_init_early();	
				
				// early arch stuff
				lk_primary_cpu_init_level(LK_INIT_LEVEL_EARLIEST, LK_INIT_LEVEL_ARCH_EARLY - 1);	
				arch_early_init();			
				
				// do any super early platform initialization
				lk_primary_cpu_init_level(LK_INIT_LEVEL_ARCH_EARLY, LK_INIT_LEVEL_PLATFORM_EARLY - 1);
				platform_early_init();		
				
				// do any super early target initialization
				lk_primary_cpu_init_level(LK_INIT_LEVEL_PLATFORM_EARLY, LK_INIT_LEVEL_TARGET_EARLY - 1);
				target_early_init();

				
				// bring up the kernel heap
				lk_primary_cpu_init_level(LK_INIT_LEVEL_TARGET_EARLY, LK_INIT_LEVEL_HEAP - 1);
				dprintf(SPEW, "initializing heap\n");
				heap_init();
				
				// deal with any static constructors
				dprintf(SPEW, "calling constructors\n");
				//call_constructors();
                                                                                                                          
				// initialize the kernel
				lk_primary_cpu_init_level(LK_INIT_LEVEL_HEAP, LK_INIT_LEVEL_KERNEL - 1);
				kernel_init();
 
				lk_primary_cpu_init_level(LK_INIT_LEVEL_KERNEL, LK_INIT_LEVEL_THREADING - 1);
 
				// create a thread to complete system initialization
				dprintf(SPEW, "creating bootstrap completion thread\n");
				thread_t *t = thread_create("bootstrap2", &bootstrap2, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
				thread_set_pinned_cpu(t, 0);
				thread_detach(t);
				thread_resume(t);
 
				// become the idle thread and enable interrupts to start the scheduler
				thread_become_idle();


